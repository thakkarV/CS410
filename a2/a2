 
CS 410	
Advanced Software Systems
Instructor: Eric Missimer 
Assignment 2
Note: Please follow the assignment guidelines carefully and submit exactly the information that is required. Anyone who fails to submit files in the correct format (i.e., adhering to name conventions etc) will not be graded. Make sure to read the submission instructions: Submission Instructions.
Purpose

In this assignment you will become more familiar with the basic tools required of any good C and/or systems programmer. The bulk of the assignment involves file input and output. All material required to correctly program the assignment can be found in the Stevens text, except where noted.
Problem: A String Searching Program

You are required to write a program called "finds" that will traverse a directory hierarchy, searching for files that contain a specific string, which we will call "s" (hence the name "finds" for "find string"). Once a file is identified that contains "s", you should print the filename to the standard output along with the line in the file containing the string.
In essence, you are going to write a program that does something like the following:

find -type f pathname -name '*' -exec grep 's' {} \; -print

which is a command string you can type in a shell, to search from pathname for all files (denoted by the wildcard '*') that contain the string "s". Once a matching file is found, the line(s) in the file containing "s" are printed, followed by the name of the file. 
 

The "finds" Program and its Command-Line Arguments

You will write the program "finds" to take several command-line arguments as follows:
finds -p pathname [-f c|h|S] [-l] -s s

The -p, -f, and -s flags are there for convenience (believe it or not!) to help with parsing the command-line, especially if you choose to use getopt() or one of its variants (see "man -s 3c getopt" on Solaris, or "man 3c getopt" on Linux, for more details).

The pathname is a string identifying some location in the directory hierarchy e.g., /, /home/joe, ., or .. 
The -f flag is optional but must be followed by either "c", "h" or "S" to identify the file suffixes for the files that we wish to search. For example, "-f c" means search for all files with a .c ending, while "-f h" means search for all files with a .h ending. If the -f option is not used, it is assumed that you wish to search through all regular files from the pathname for those files containing "s".

The -l option, when specified, means to traverse symbolic links. This is similar to -L in the find program. If -l is not specified symbol links should not be traversed.

The final argument accepted by "finds" is specified by the -s flag and is followed by the search string "s".

NOTE: You are allowed to use getopt() or one of its variants, as mentioned above, to parse command-line arguments. For further details you can look at the following URL:

http://www.gnu.org/software/libc/manual/html_node/Getopt.html#Getopt

Traversing a Directory Tree

Starting with the directory that was specified by pathname in the command line, your program should inspect all subsequent directory entries. For each regular file, you need to open it and search for the presence of "s".
If "s" is found, you must print the line in the file containing the string to the standard output, followed by the full name of the file (i.e., the entire pathname for the file).
Helpful routines to traverse a directory tree can be found in Program 4.7 in Stevens book.

NOTE: You are NOT allowed to use the system() command or any routines such as ftw(). You must write your own routines that may be based upon code in the book. Most information you will need for this assignment is covered in the first 4 chapters.

Inspecting Regular Files

You need to identify each file ending in either .c, .h, .S (or any ending if the -f flag is not used). For each matching regular file (and symbolic link if -l is used), you must search for "s", until you reach the end of the file, and then you should move on to searching other files.
Output

All output should be written to the standard output device. Appropriate error messages should appear on standard error where appropriate (invalid fd or read-only file descriptor, for example), but the functions should continue execution when any errors are non-fatal.

You are strongly encouraged to use the standard I/O library functions, and their associated file streams. You will discover they are much easier to use than system calls that directly manipulate file descriptors.

Extra Credit: Using "finds" to Search for Wildcards

Once you have completed the first part, you should try to extend "finds" to be more powerful. In this part of the assignment, you will need to modify how you specify and search for the string "s" in your regular files. We will discuss regular expressions briefly in class. More information can be found at http://www.regular-expressions.info/tutorial.html. You will only support a limited subset of regular expressions, specifically, you can assume that "s" can take the following form:
any number of alphanumerical characters in any order
any number of alphanumerical characters in any order, interspersed with control characters; the following control characters have special meaning:
'.' matches any single alphanumerical character in a given sequence e.g., "a.b" matches "abb", "a9b" etc
'*' matches zero or more instances of the previous character e.g., "a*b" matches "b", "ab", "aab" etc
'?' matches zero or one instance of the previous character e.g., "a?b" matches "ab" or "b".
Parentheses for grouping substrings: '(' and ')'. For example, a regular expression of the form "a(bc)*" matches "a", "abc", "abcbc" etc.
NOTE: all other characters are invalid. If "s" is specified incorrectly, an error message should be reported by "finds" when the command-line is parsed, and the program should be terminated.
For simplicity, you can assume that valid regular expressions have at most one of each of the control characters '.', '*', and '?'. 
You should extend the functionality of "finds" to support the control characters listed above. Any use of existing regular expressions libraries will result zero extra credit.
Testing

The binary that will run a combination of find+grep can be found here: finds_runner. This program expects one command line argument, a file containing the test cases to run. Make sure that finds_runner is marked as executable so you can run it. This file along with the directories to run can be found here: cs410_finds_test_cases.tar.gz. Basically running the following commands on csa2/cs410 will run the test cases.

tar xf cs410_finds_test_cases.tar.gz
cp finds_runner cs410_finds_test_cases/
cp your-finds-program cs410_finds_test_cases/
cd cs410_finds_test_cases
./finds_runner test_cases_script
Submission

Work is to be submitted using gsubmit (in a folder called a2). Please submit only the .h and .c files (you may only need a main.c) in a directory called a2. Also, submit a Makefile which compiles and links your sources into an executable called "finds". Do not include any other test files. Your code will be tested on csa2/cs410. Programs that correctly compile/run on other platforms will not receive credit if they don't work on csa2/cs410. If necessary, you may submit a README file to explain the extent to which your program works and how it should be compiled.

You should only submit ONE final version of this assignment, that supports the searching of strings with wildcards.

Academic Conduct Reminder

Submitting part or all of another person's assignment (or leveraging another person's work to produce your own submission) is an act of plagiarism. Submissions will be checked for originality by hand and by a program checker -- please do not jeopardize your academic standing by taking chances in completing this assignment. Please see the TF or instructor if you have any questions about where we (and the college) draw the line regarding acceptable levels of collaboration.