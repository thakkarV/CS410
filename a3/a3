 
CS 410	
Systems Programming
Instructor: Eric Missimer 
Assignment 3
Note: Please follow the assignment guidelines carefully and submit exactly the information that is required. Anyone who fails to submit files in the correct format (i.e., adhering to name conventions etc) will not be graded.
Purpose

The purpose of this assignment is to become familiar with the primitives used in process control and inter-process communication. You may utilize source code from the course text book, as necessary.
In this assignment you are permitted to work in groups of up to TWO people, should you so choose. Those who work in groups (HIGHLY RECOMMENDED!) are required to evaluate both themselves and their group member. Evaluations should be private and unknown to the other group member.

Idea

In this project, you are going to implement a basic shell called "myshell", to learn how a command interpreter works. You will need to write a simple parser to interpret commands, and then you will need to use fork/exec functions to create and execute these commands. I/O redirection and the use of pipes will also be required.

In order to successfully complete the assignment, you will have to implement certain concepts, including interprocess communication (pipes), process creation and execution. Relevant functions include: kill, pipe, fork, exec etc.
This assignment will require a thorough understanding of how a system functions, and so it is to your benefit to truly think about the model that follows before you start to code (ie. good planning will definitely pay off).

"Myshell" specification
The specification of "myshell" is similar to the "bash" shell, with the following requirements:

1. Execution file: the execution file for this project should be called "myshell".

2. Shell prompt: If the input to the "myshell" program is from a terminal, you should print "myshell>" as the prompt for the user to type in the shell command. If the input is from a file, you should not print any prompt, as this will help when it comes to testing your projects. NOTE: You can use the "isatty" function to determine whether the input (via a specific file descriptor) is from a terminal or not.

3. Command execution and shell termination: "myshell" reads its input from stdin, parsing the command line to determine how to execute the shell request. Termination of "myshell" occurs either when a user types "ctrl-d", or when the program issues an "exit()" call due to some error/termination condition. 
The following table describes the valid command line formats.

Command Line Format
Description
cmd	A single command that identifies the name of a program file.
cmd; cmd	A sequence of commands: "myshell" should execute them one after another.
cmd > output_file	Redirect stdout of the cmd to the file with the name "output_file".
cmd < input_file	Redirect stdin of the cmd to the file with the name "input_file.
cmd 1> output_file	Redirect stdout of the cmd to the file with the name "output_file".
cmd 2> output_file	Redirect stderr of the cmd to the file with the name "output_file".
cmd &> output_file	Redirect both stdout and stderr of the cmd to the file with the name "output_file".
cmd1 | cmd2 | cmd3	Pipeline the output of the command before each "|" symbol to the input of the command after the same "|" symbol. 
cmd &	"myshell" should let cmd execute in the background, so that the shell can interpret further input commands.
4. Special Input: "ctrl-c" is the default key sequence to send a "SIGINT" signal to a process. In "myshell", you should intercept this signal, and send it to all "foreground" processes to stop them instead of stopping "myshell".

5. Prevent "zombie" children: when a command running in the background finishes, it must inform  the "myshell" (parent) process via a "SIGCHLD" signal. "myshell" can then keep track of which child processes are still active.

Hints and tips

You should use the "fork" syscall to create each child of "myshell" and then one of the "exec*" functions to execute the command in the corresponding child's address space. You should also use either the "wait" or "waitpid" function to determine the exit status of a terminating child.

For output redirection and piping between processes: to redirect a file descriptor to stdin, stdout, or stderr you can use the "dup2" function.

In the following example, "fname" is used as the "standard input" (by convention file descriptor 0) of the command:

if (( fd = open ( fname, O_RDONLY )) == -1 )
{
    fprintf( stderr, "mysh error: can't open %s\n", fname);
    exit(1);
}

dup2(fd, 0);
close(fd);

if( execvp(cmd, argv) == -1 )
{
    fprintf(stderr, "myshell error: %s\n", strerror(errno) );
}
You are recommended to develop your code in a series of stages:

write and test a parser to read the command lines
get the simple commands to work
get I/O redirection to work
get pipes to work
get "&" to work
Parsing shell strings: in this project, you only need to implement a simple command line parser, in which we use "space" as the delimiter between command "tokens". You can use support libraries such as the Gnu readline library for command line parsing (http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html) but please state any such libraries you use for parsing in a README file.

Reference Links

Bash Guide for Beginners (http://www.tldp.org/LDP/Bash-Beginners-Guide/html/index.html)
Advanced Bash-Scripting Guide (http://www.tldp.org/LDP/abs/html/index.html)
GNU Bash Online Manual is available at www.gnu.org/software/bash/manual/bash.html
Advanced Programming in the UNIX Environment by W. Richard Stevens
Testing

Testing scripts can be found here. For each script you can do bash < script and compare the results to ./myshell < script. Note that some scripts have no ouput as they redirect output to a file. There is a bonus script that tests "cd". Finally, note that the test scripts do not test all functionality that will be graded such as proper handling of ctrl+c and ctrl+d.

Submission

All source code and a Makefile should be gsubmitted to a3/. Make sure you include a README file to explain the features and limitations of your solution. Also, if you work in a group, please include in your gsubmit submission what portions you worked on specifically along with an evaluation of your group member.

NOTE: Everyone in the group should submit the files separately.